#!/usr/bin/env node

var download = require('download-git-repo')
var program = require('commander')
var fs = require('fs')
var exists = require('fs').existsSync
var ora = require('ora')
var chalk = require('chalk')

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ zpvue my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */
var rawName = program.args[0]
var clone = program.clone || false

run()

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (rawName == 'router') {
    cvue()
    return
  }
  downloadAndGenerate()
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate () {
  var spinner = ora('downloading template')
  spinner.start()
  download('zengping/vue-template', rawName, { clone: clone }, function (err) {
    spinner.stop()
      console.log('  Examples:')
      console.log()
      console.log('    cd ' + rawName)
      console.log('    npm install')
      console.log('    npm run dev')
      console.log()
  })
}

function cvue () {
  let vuepath = program.args[1]
  let index = vuepath.lastIndexOf('/')
  let dirpath = vuepath.substr(0, index)
  let vuefile = vuepath.substr(index+1)
  let dirpath2 = './src'
  if (dirpath) {
    let dirs = dirpath.split('/')
    for (let i = 0; i < dirs.length; i++) {
      let paths = [dirpath2, dirs[i]]
      dirpath2 = paths.join('/')
      if (!fs.existsSync(dirpath2)) {
        fs.mkdirSync(dirpath2)
      }
    }
  }
  fs.writeFile(dirpath2 + '/' + vuefile + '.vue', cele(vuefile.toLowerCase()), function(err){
    if(err) {
      return console.log(err);
    }
  })
}

function cele (name) {
  return `
<template>
  <div id="${name}">
    {{msg}}
  </div>
</template>

<script>
export default {
  name: '${name}',
  data () {
    return {
      msg: 'this is a example'
    }
  }
}
</script>
  `
}